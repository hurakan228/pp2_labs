import psycopg2
import pandas as pd

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(
    dbname="lab11",
    user="postgres",
    password="Zz159632",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

def create_table():
    cur.execute('''
        CREATE TABLE IF NOT EXISTS phonebook (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            phone VARCHAR(20)
        );
    ''')
    conn.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ¬´–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞¬ª.")

def load_from_csv(file_path):
    df = pd.read_csv(file_path)

    print("üîé –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:", df.columns.tolist())
    print(df.head())

    for _, row in df.iterrows():
        cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s);", (row['name'], row['phone']))
    conn.commit()
    print("Data loaded from CSV.")


def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
    cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s);", (name, phone))
    conn.commit()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã.")

def update_data(old_value, new_value, column='name'):
    if column not in ['name', 'phone']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª.")
        return
    cur.execute(f"UPDATE phonebook SET {column} = %s WHERE {column} = %s;", (new_value, old_value))
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def search_data(filter_by=None, value=None):
    if filter_by in ['name', 'phone']:
        cur.execute(f"SELECT * FROM phonebook WHERE {filter_by} ILIKE %s;", (f"%{value}%",))
    else:
        cur.execute("SELECT * FROM phonebook;")
    rows = cur.fetchall()
    for row in rows:
        print(row)

def delete_data(by_value, column='name'):
    if column not in ['name', 'phone']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª.")
        return
    cur.execute(f"DELETE FROM phonebook WHERE {column} = %s;", (by_value,))
    conn.commit()
    print("üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


def search_by_pattern():
    pattern = input("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    cur.execute("SELECT * FROM search_contacts(%s);", (pattern,))
    rows = cur.fetchall()
    for row in rows:
        print(row)

def insert_or_update():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
    cur.execute("CALL insert_or_update_user(%s, %s);", (name, phone))
    conn.commit()
    print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def insert_many():
    num = int(input("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å? "))
    users = []

    for _ in range(num):
        name = input("–ò–º—è: ")
        phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
        users.append((name, phone))

    cur.execute("""
        CALL insert_many_users(%s::user_record[]);""", (users,))
    
    conn.commit()

def paginated_query():
    try:
        limit = int(input(" –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞—Ç—å): "))
        offset = int(input(" –í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ (—Å –∫–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞—Ç—å): "))

        if limit <= 0 or offset < 0:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –∞ —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        cur.execute("SELECT * FROM get_paginated_users(%s, %s);", (limit, offset))
        rows = cur.fetchall()
        
        if rows:
            print(" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for row in rows:
                print(row)
        else:
            print("‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", e)


def delete_with_procedure():
    column = input("–£–¥–∞–ª–∏—Ç—å –ø–æ (name/phone): ").strip().lower()
    value = input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()

    if column not in ['name', 'phone']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    try:
        cur.execute("CALL delete_user(%s, %s);", (value, column))
        conn.commit()
        print("üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", e)


def delete_by_id():
    try:
        target_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
        cur.execute("CALL delete_user_by_id(%s);", (target_id,))
        conn.commit()
        print(f"üóëÔ∏è –ó–∞–ø–∏—Å—å —Å ID {target_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", e)


def menu():
    create_table()
    while True:
        print("\nüìû –ú–ï–ù–Æ –¢–ï–õ–ï–§–û–ù–ù–û–ô –ö–ù–ò–ì–ò:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV")
        print("2. –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("4. –ü–æ–∏—Å–∫")
        print("5. –£–¥–∞–ª–∏—Ç—å")
        print("6. –í—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("7.–ü–∞–≥–∏–Ω–∞—Ü–∏—è")
        print("8.–£–¥–∞–ª–∏—Ç—å –ø–æ ID")
        print("0. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: ")

        if choice == '1':
            path = input("–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É: ")
            load_from_csv(path)
        elif choice == '2':
            insert_from_console()
        elif choice == '3':
            col = input("–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å? (–∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω): ")
            old = input("–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
            new = input("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
            update_data(old, new, col)
        elif choice == '4':
            search_by_pattern()
        elif choice == '5':
            delete_with_procedure()
        elif choice == '6':
            insert_or_update()
        elif choice == '7':
            paginated_query()  
        elif choice == '8':
            delete_by_id()
        elif choice == '0':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    cur.close()
    conn.close()

if __name__ == "__main__":
    menu()
