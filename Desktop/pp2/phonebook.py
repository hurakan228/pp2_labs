import psycopg2
import pandas as pd

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(
    dbname="lab10",
    user="postgres",
    password="Zz159632",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

def create_table():
    cur.execute('''
        CREATE TABLE IF NOT EXISTS phonebook (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            phone VARCHAR(20)
        );
    ''')
    conn.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ¬´–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞¬ª.")

def load_from_csv(file_path):
    df = pd.read_csv(file_path)

    print("üîé –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:", df.columns.tolist())
    print(df.head())

    for _, row in df.iterrows():
        cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s);", (row['name'], row['phone']))
    conn.commit()
    print("Data loaded from CSV.")


def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
    cur.execute("INSERT INTO phonebook (name, phone) VALUES (%s, %s);", (name, phone))
    conn.commit()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã.")

def update_data(old_value, new_value, column='name'):
    if column not in ['name', 'phone']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª.")
        return
    cur.execute(f"UPDATE phonebook SET {column} = %s WHERE {column} = %s;", (new_value, old_value))
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def search_data(filter_by=None, value=None):
    if filter_by in ['name', 'phone']:
        cur.execute(f"SELECT * FROM phonebook WHERE {filter_by} ILIKE %s;", (f"%{value}%",))
    else:
        cur.execute("SELECT * FROM phonebook;")
    rows = cur.fetchall()
    for row in rows:
        print(row)

def delete_data(by_value, column='name'):
    if column not in ['name', 'phone']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª.")
        return
    cur.execute(f"DELETE FROM phonebook WHERE {column} = %s;", (by_value,))
    conn.commit()
    print("üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

def menu():
    create_table()
    while True:
        print("\nüìû –ú–ï–ù–Æ –¢–ï–õ–ï–§–û–ù–ù–û–ô –ö–ù–ò–ì–ò:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV")
        print("2. –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("4. –ü–æ–∏—Å–∫")
        print("5. –£–¥–∞–ª–∏—Ç—å")
        print("0. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: ")

        if choice == '1':
            path = input("–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É: ")
            load_from_csv(path)
        elif choice == '2':
            insert_from_console()
        elif choice == '3':
            col = input("–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å? (–∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω): ")
            old = input("–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
            new = input("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
            update_data(old, new, col)
        elif choice == '4':
            col = input("–§–∏–ª—å—Ç—Ä –ø–æ (–∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö): ")
            val = input("–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
            search_data(col if col else None, val if val else None)
        elif choice == '5':
            col = input("–£–¥–∞–ª–∏—Ç—å –ø–æ (–∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω): ")
            val = input("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            delete_data(val, col)
        elif choice == '0':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    cur.close()
    conn.close()

if __name__ == "__main__":
    menu()
